# -*- coding: utf-8 -*-
"""egyptregionsmap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Mh2q9ctMGwKBBwG8hI0CwaBaWe5BrSC
"""

# Defining map regions
# map = {
#     "C" = Cairo region
#     "A" = Alexandria region
#     "D" = Delta region
#     "Q" = Qanal region
#     "N" = North sa'ed region
#     "M" = Middle sa'ed region
#     "S" = South sa'ed region
# }

map = {
    "C": ["A", "D", "Q", "N", "M"],
    "A": ["C", "D", "M"],
    "D": ["C", "A", "Q"],
    "Q": ["C", "D", "S"],
    "N": ["C", "M", "S"],
    "M": ["C", "A", "N", "S"],
    "S": ["Q", "N", "M"],
}

map_pos = {"C": (0,0),
        "A": (-1,1),
        "D": (0,1),
        "Q": (1,1),
        "N": (0.4,-0.5),
        "M": (-1,-1),
        "S": (1,-1),
        }

# Define the colors
colors = ["red", "green", "blue"]


# Define the function to check constraints
def check_constraints(state, color, assignment):
    for neighbor in map[state]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True


# Define the backtracking search function
def backtracking_search(assignment):
    if len(assignment) == len(map):
        return assignment
    unassigned_states = [state for state in map if state not in assignment]
    first_unassigned_state = unassigned_states[0]
    for color in colors:
        if check_constraints(first_unassigned_state, color, assignment):
            assignment[first_unassigned_state] = color
            result = backtracking_search(assignment)
            if result is not None:
                return result
            del assignment[first_unassigned_state]
    return None


# Solve the problem
solution = backtracking_search({})

# Print the solution
print(solution)

import networkx as nx
import matplotlib.pyplot as plt
# Visualize the map before and after coloring
G = nx.Graph(map)

# Draw the graph before coloring
nx.draw(G,pos=map_pos, with_labels=True)
plt.title("Map before coloring")
plt.show()

# Color the nodes based on the solution
color_map = [solution[state] for state in G.nodes()]

# Draw the graph after coloring
nx.draw(G,pos=map_pos, node_color=color_map, with_labels=True)
plt.title("Map after coloring")
plt.show()